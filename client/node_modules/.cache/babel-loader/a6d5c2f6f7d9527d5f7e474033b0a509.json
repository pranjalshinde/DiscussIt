{"ast":null,"code":"var _jsxFileName = \"/home/sai/Desktop/DiscussIt/client/src/components/UserList.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { Avatar, useChatContext } from 'stream-chat-react';\nimport { InviteIcon } from '../assets';\n\nconst ListContainer = _ref => {\n  let {\n    children\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"user-list__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"user-list__header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 17\n    }\n  }, \"User\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 17\n    }\n  }, \"Invite\")), children);\n};\n\nconst UserItem = _ref2 => {\n  let {\n    user,\n    setSelectedUsers\n  } = _ref2;\n  const [selected, setSelected] = useState(false);\n\n  const handleSelect = () => {\n    if (selected) {\n      setSelectedUsers(prevUsers => prevUsers.filter(prevUser => prevUser !== user.id));\n    } else {\n      setSelectedUsers(prevUsers => [...prevUsers, user.id]);\n    }\n\n    setSelected(prevSelected => !prevSelected);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"user-item__wrapper\",\n    onClick: handleSelect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"user-item__name-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    image: user.image,\n    name: user.fullName || user.id,\n    size: 32,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"user-item__name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 17\n    }\n  }, user.fullName || user.id)), selected ? /*#__PURE__*/React.createElement(InviteIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 25\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"user-item__invite-empty\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 42\n    }\n  }));\n};\n\nconst UserList = _ref3 => {\n  let {\n    setSelectedUsers\n  } = _ref3;\n  const {\n    client\n  } = useChatContext();\n  const [users, setUsers] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [listEmpty, setListEmpty] = useState(false);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    const getUsers = async () => {\n      if (loading) return;\n      setLoading(true);\n\n      try {\n        const response = await client.queryUsers({\n          id: {\n            $ne: client.userID\n          }\n        }, {\n          id: 1\n        }, {\n          limit: 8\n        });\n\n        if (response.users.length) {\n          setUsers(response.users);\n        } else {\n          setListEmpty(true);\n        }\n      } catch (error) {\n        setError(true);\n      }\n\n      setLoading(false);\n    };\n\n    if (client) getUsers();\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/React.createElement(ListContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"user-list__message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }\n    }, \"Error loading, please refresh and try again.\"));\n  }\n\n  if (listEmpty) {\n    return /*#__PURE__*/React.createElement(ListContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"user-list__message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }\n    }, \"No users found.\"));\n  }\n\n  return /*#__PURE__*/React.createElement(ListContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"user-list__message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 24\n    }\n  }, \"Loading users...\") : users === null || users === void 0 ? void 0 : users.map((user, i) => /*#__PURE__*/React.createElement(UserItem, {\n    index: i,\n    key: user.id,\n    user: user,\n    setSelectedUsers: setSelectedUsers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 19\n    }\n  })));\n};\n\nexport default UserList;","map":{"version":3,"sources":["/home/sai/Desktop/DiscussIt/client/src/components/UserList.jsx"],"names":["React","useEffect","useState","Avatar","useChatContext","InviteIcon","ListContainer","children","UserItem","user","setSelectedUsers","selected","setSelected","handleSelect","prevUsers","filter","prevUser","id","prevSelected","image","fullName","UserList","client","users","setUsers","loading","setLoading","listEmpty","setListEmpty","error","setError","getUsers","response","queryUsers","$ne","userID","limit","length","map","i"],"mappings":"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","sourcesContent":["\nimport React, { useEffect, useState } from 'react';\nimport { Avatar, useChatContext } from 'stream-chat-react';\n\nimport { InviteIcon } from '../assets';\n\nconst ListContainer = ({ children }) => {\n    return (\n        <div className=\"user-list__container\">\n            <div className=\"user-list__header\">\n                <p>User</p>\n                <p>Invite</p>\n            </div>\n            {children}\n        </div>\n    )\n}\n\nconst UserItem = ({ user, setSelectedUsers }) => {\n    const [selected, setSelected] = useState(false)\n\n    const handleSelect = () => {\n        if(selected) {\n            setSelectedUsers((prevUsers) => prevUsers.filter((prevUser) => prevUser !== user.id))\n        } else {\n            setSelectedUsers((prevUsers) => [...prevUsers, user.id])\n        }\n\n        setSelected((prevSelected) => !prevSelected)\n    }\n\n    return (\n        <div className=\"user-item__wrapper\" onClick={handleSelect}>\n            <div className=\"user-item__name-wrapper\">\n                <Avatar image={user.image} name={user.fullName || user.id} size={32} />\n                <p className=\"user-item__name\">{user.fullName || user.id}</p>\n            </div>\n            {selected ? <InviteIcon /> : <div className=\"user-item__invite-empty\" />}\n        </div>\n    )\n}\n\n\nconst UserList = ({ setSelectedUsers }) => {\n    const { client } = useChatContext();\n    const [users, setUsers] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [listEmpty, setListEmpty] = useState(false);\n    const [error, setError] = useState(false);\n\n    useEffect(() => {\n        const getUsers = async () => {\n            if(loading) return;\n\n            setLoading(true);\n            \n            try {\n                const response = await client.queryUsers(\n                    { id: { $ne: client.userID } },\n                    { id: 1 },\n                    { limit: 8 } \n                );\n\n                if(response.users.length) {\n                    setUsers(response.users);\n                } else {\n                    setListEmpty(true);\n                }\n            } catch (error) {\n               setError(true);\n            }\n            setLoading(false);\n        }\n\n        if(client) getUsers()\n    }, []);\n\n    if(error) {\n        return (\n            <ListContainer>\n                <div className=\"user-list__message\">\n                    Error loading, please refresh and try again.\n                </div>\n            </ListContainer>\n        )\n    }\n\n    if(listEmpty) {\n        return (\n            <ListContainer>\n                <div className=\"user-list__message\">\n                    No users found.\n                </div>\n            </ListContainer>\n        )\n    }\n\n    return (\n        <ListContainer>\n            {loading ? <div className=\"user-list__message\">\n                Loading users...\n            </div> : (\n                users?.map((user, i) => (\n                  <UserItem index={i} key={user.id} user={user} setSelectedUsers={setSelectedUsers} />  \n                ))\n            )}\n        </ListContainer>\n    )\n}\n\nexport default UserList;"]},"metadata":{},"sourceType":"module"}