{"ast":null,"code":"var _jsxFileName = \"/home/sai/Desktop/DiscussIt/client/src/components/ChannelSearch.jsx\";\n// import React, {useState, useEffect} from 'react';\n// import { getChannel, useChatContext } from 'stream-chat-react';\n// import { SearchIcon } from '../assets';\n// const ChannelSearch = () => {\n//     const [query, setQuery] = useState('');\n//     const [loading, setLoading] = useState(false);\n//     const getChannels = async (text) => {\n//         try{\n//             //Todo : fetch channels\n//         }\n//         catch (error) {\n//             setQuery('');\n//         }\n//     }\n//     const onSearch = (event) => {\n//         event.preventDefault();\n//         setLoading(true);\n//         setQuery(event.target.value);\n//         getChannels(event.target.value);\n//     }\n//     return (\n//         <div className=\"channel-search__container\">\n//             <div className=\"channel-search__input__wrapper\">\n//                 <div className=\"channel-search__input__icon\">\n//                     <SearchIcon />\n//                 </div>\n//                 <input \n//                     className=\"channel-search__input__text\"\n//                     placeholder=\"Search\"\n//                     type=\"text\"\n//                     value={query}\n//                     onChange={onSearch}\n//                 />\n//             </div>\n//         </div>\n//     )\n// }\n// export default ChannelSearch\nimport React, { useState, useEffect } from 'react';\nimport { useChatContext } from 'stream-chat-react';\nimport { ResultsDropdown } from './';\nimport { SearchIcon } from '../assets';\n\nconst ChannelSearch = _ref => {\n  let {\n    setToggleContainer\n  } = _ref;\n  const {\n    client,\n    setActiveChannel\n  } = useChatContext();\n  const [query, setQuery] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [teamChannels, setTeamChannels] = useState([]);\n  const [directChannels, setDirectChannels] = useState([]);\n  useEffect(() => {\n    if (!query) {\n      setTeamChannels([]);\n      setDirectChannels([]);\n    }\n  }, [query]);\n\n  const getChannels = async text => {\n    try {\n      const channelResponse = client.queryChannels({\n        type: 'team',\n        name: {\n          $autocomplete: text\n        },\n        members: {\n          $in: [client.userID]\n        }\n      });\n      const userResponse = client.queryUsers({\n        id: {\n          $ne: client.userID\n        },\n        name: {\n          $autocomplete: text\n        }\n      });\n      const [channels, {\n        users\n      }] = await Promise.all([channelResponse, userResponse]);\n      if (channels.length) setTeamChannels(channels);\n      if (users.length) setDirectChannels(users);\n    } catch (error) {\n      setQuery('');\n    }\n  };\n\n  const onSearch = event => {\n    event.preventDefault();\n    setLoading(true);\n    setQuery(event.target.value);\n    getChannels(event.target.value);\n  };\n\n  const setChannel = channel => {\n    setQuery('');\n    setActiveChannel(channel);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"channel-search__container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"channel-search__input__wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"channel-serach__input__icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(SearchIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    className: \"channel-search__input__text\",\n    placeholder: \"Search\",\n    type: \"text\",\n    value: query,\n    onChange: onSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  })), query && /*#__PURE__*/React.createElement(ResultsDropdown, {\n    teamChannels: teamChannels,\n    directChannels: directChannels,\n    loading: loading,\n    setChannel: setChannel,\n    setQuery: setQuery,\n    setToggleContainer: setToggleContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }));\n};\n\nexport default ChannelSearch;","map":{"version":3,"sources":["/home/sai/Desktop/DiscussIt/client/src/components/ChannelSearch.jsx"],"names":["React","useState","useEffect","useChatContext","ResultsDropdown","SearchIcon","ChannelSearch","setToggleContainer","client","setActiveChannel","query","setQuery","loading","setLoading","teamChannels","setTeamChannels","directChannels","setDirectChannels","getChannels","text","channelResponse","queryChannels","type","name","$autocomplete","members","$in","userID","userResponse","queryUsers","id","$ne","channels","users","Promise","all","length","error","onSearch","event","preventDefault","target","value","setChannel","channel"],"mappings":"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","sourcesContent":["// import React, {useState, useEffect} from 'react';\n// import { getChannel, useChatContext } from 'stream-chat-react';\n\n// import { SearchIcon } from '../assets';\n\n// const ChannelSearch = () => {\n\n//     const [query, setQuery] = useState('');\n//     const [loading, setLoading] = useState(false);\n\n//     const getChannels = async (text) => {\n//         try{\n//             //Todo : fetch channels\n//         }\n//         catch (error) {\n//             setQuery('');\n//         }\n//     }\n\n//     const onSearch = (event) => {\n//         event.preventDefault();\n\n//         setLoading(true);\n//         setQuery(event.target.value);\n//         getChannels(event.target.value);\n//     }\n\n//     return (\n//         <div className=\"channel-search__container\">\n//             <div className=\"channel-search__input__wrapper\">\n//                 <div className=\"channel-search__input__icon\">\n//                     <SearchIcon />\n//                 </div>\n//                 <input \n//                     className=\"channel-search__input__text\"\n//                     placeholder=\"Search\"\n//                     type=\"text\"\n//                     value={query}\n//                     onChange={onSearch}\n//                 />\n//             </div>\n//         </div>\n//     )\n// }\n\n// export default ChannelSearch\n\n\nimport React, { useState, useEffect } from 'react';\nimport { useChatContext } from 'stream-chat-react';\n\nimport { ResultsDropdown } from './'\nimport { SearchIcon } from '../assets';\n\nconst ChannelSearch = ({ setToggleContainer }) => {\n    const { client, setActiveChannel } = useChatContext();\n    const [query, setQuery] = useState('');\n    const [loading, setLoading] = useState(false);\n    const [teamChannels, setTeamChannels] = useState([])\n    const [directChannels, setDirectChannels] = useState([])\n\n    useEffect(() => {\n        if(!query) {\n            setTeamChannels([]);\n            setDirectChannels([]);\n        }\n    }, [query])\n\n    const getChannels = async (text) => {\n        try {\n            const channelResponse = client.queryChannels({\n                type: 'team', \n                name: { $autocomplete: text }, \n                members: { $in: [client.userID]}\n            });\n            const userResponse = client.queryUsers({\n                id: { $ne: client.userID },\n                name: { $autocomplete: text }\n            })\n\n            const [channels, { users }] = await Promise.all([channelResponse, userResponse]);\n\n            if(channels.length) setTeamChannels(channels);\n            if(users.length) setDirectChannels(users);\n        } catch (error) {\n            setQuery('')\n        }\n    }\n\n    const onSearch = (event) => {\n        event.preventDefault();\n\n        setLoading(true);\n        setQuery(event.target.value);\n        getChannels(event.target.value)\n    }\n\n    const setChannel = (channel) => {\n        setQuery('');\n        setActiveChannel(channel);\n    }\n\n    return (\n        <div className=\"channel-search__container\">\n            <div className=\"channel-search__input__wrapper\">\n                <div className=\"channel-serach__input__icon\">\n                    <SearchIcon />\n                </div>\n                <input \n                    className=\"channel-search__input__text\" \n                    placeholder=\"Search\" \n                    type=\"text\" \n                    value={query}  \n                    onChange={onSearch}\n                />\n            </div>\n            { query && (\n                <ResultsDropdown \n                    teamChannels={teamChannels}\n                    directChannels={directChannels}\n                    loading={loading}\n                    setChannel={setChannel}\n                    setQuery={setQuery}\n                    setToggleContainer={setToggleContainer}\n                />\n            )}\n        </div>\n    )\n}\n\nexport default ChannelSearch"]},"metadata":{},"sourceType":"module"}